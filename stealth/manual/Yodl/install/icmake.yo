After downloading the bf(stealth) archive, it should be unpacked. The name of
the archive is of the form tt(stealth-V.VV.tar.gz), where tt(V.VV) is a
version number. Below, tt(V.VV) should be altered into the version of the
archive that is actually used.

    itemization(
    it() First, determine a directory under which the archive's file should be
stored. E.g., if the files in the archive should be stored under tt(/tmp), and
the archive itself is stored in tt(/tmp) as well, do:
        verb(
    cd /tmp
    tar xzf stealth-V.VV.tar.gz
        )
    This creates a subdirectory tt(stealth-V.VV) in which the sources are
stored. 
    it() Next, tt(chdir) to that directory:
        verb(
    chdir stealth-V.VV
        )
    )

    The archive contains a precompiled version of bf(stealth), expecting the
following libraries (displayed by the command tt(ldd -v stealth):
    verb(
        libstdc++.so.5 => /usr/lib/libstdc++.so.5 (0x4001a000)
        libm.so.6 => /lib/libm.so.6 (0x400c3000)
        libgcc_s.so.1 => /lib/libgcc_s.so.1 (0x400e4000)
        libc.so.6 => /lib/libc.so.6 (0x400ec000)
        /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)

        Version information:
        ./stealth:
                libgcc_s.so.1 (GCC_3.0) => /lib/libgcc_s.so.1
                libc.so.6 (GLIBC_2.1.3) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.0) => /lib/libc.so.6
                libstdc++.so.5 (CXXABI_1.2) => /usr/lib/libstdc++.so.5
                libstdc++.so.5 (GLIBCPP_3.2) => /usr/lib/libstdc++.so.5
        /usr/lib/libstdc++.so.5:
                libgcc_s.so.1 (GCC_3.0) => /lib/libgcc_s.so.1
                libc.so.6 (GLIBC_2.1.3) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.2) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.0) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.1) => /lib/libc.so.6
        /lib/libm.so.6:
                libc.so.6 (GLIBC_2.1.3) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.0) => /lib/libc.so.6
        /lib/libgcc_s.so.1:
                libc.so.6 (GLIBC_2.2.4) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.1.3) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.0) => /lib/libc.so.6
        /lib/libc.so.6:
                ld-linux.so.2 (GLIBC_2.1.1) => /lib/ld-linux.so.2
                ld-linux.so.2 (GLIBC_2.2.3) => /lib/ld-linux.so.2
                ld-linux.so.2 (GLIBC_2.1) => /lib/ld-linux.so.2
                ld-linux.so.2 (GLIBC_2.2) => /lib/ld-linux.so.2
                ld-linux.so.2 (GLIBC_2.0) => /lib/ld-linux.so.2
    )
    
    Instead of using the precompiled version, bf(stealth) may be compiled from
its sources.  The compilation may use either the tt(GNU g++) compiler version
3.0x or the tt(3.2x) version. Other versions haven't been tested as of this
writing.  At least one of these compilers must have been installed.

    itemization(
    it() Edit the provided tt(build) script, and modify the following
tt(DEFINE)s according to the local situation:
        itemization(
        it() Select the proper compiler. The distribution assumes that the 3.2
compiler should be used:
        verb(
//#define COMPILER        "g++-3.0"
//#define HASHNAMESPACE   "std"

#define COMPILER        "g++-3.2"
#define HASHNAMESPACE   "__gnu_cxx"
        )
    Alternatively, the version tt(3.0) can be used by modifying the comments:
        verb(
#define COMPILER        "g++-3.0"
#define HASHNAMESPACE   "std"

//#define COMPILER        "g++-3.2"
//#define HASHNAMESPACE   "__gnu_cxx"
        )
        it() The compiler flags selected by default do not define tt(DEBUG):
        verb(
// COPT: the set of C-options
#define COPT "-mcpu=i486 -Wall"
        )
    If tt(DEBUG) is requested (producing em(lots) of output when bf(stealth)
is started using the tt(-d) command-line flag), then add the tt(-DDEBUG) flag
here:
        verb(
// COPT: the set of C-options
#define COPT "-mcpu=i486 -Wall -DDEBUG"
        )
        )
    it() Next, run tt(build). tt(build) is an tt(icmake) script which performs
the compilation. There should be no warnings.
        verb(
    ./build
        )
    )
    This completes the compilation. The program is called bf(stealth), and is
found in the same directory as the tt(build) script.


       