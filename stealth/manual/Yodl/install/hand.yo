After downloading the bf(stealth) archive, it should be unpacked. The name of
the archive is of the form tt(stealth-CURVERS.tar.gz), where tt(CURVERS) is a
version number. Below, tt(CURVERS) should be altered into the version of the
archive that is actually used.

    itemization(
    it() First, determine a directory under which the archive's file should be
stored. E.g., if the files in the archive should be stored under tt(/tmp), and
the archive itself is stored in tt(/tmp) as well, do:
        verb(
    cd /tmp
    tar xzf stealth-CURVERS.tar.gz
        )
    This creates a subdirectory tt(stealth-CURVERS) in which the sources are
stored. 
    it() Next, tt(chdir) to that directory:
        verb(
    chdir stealth-CURVERS
        )
    )

    The archive contains a precompiled version of bf(stealth), expecting the
following libraries (displayed by the command tt(ldd -v stealth):
    verb(
        libstdc++.so.5 => /usr/lib/libstdc++.so.5 (0x4001a000)
        libm.so.6 => /lib/libm.so.6 (0x400c3000)
        libgcc_s.so.1 => /lib/libgcc_s.so.1 (0x400e4000)
        libc.so.6 => /lib/libc.so.6 (0x400ec000)
        /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)

        Version information:
        ./stealth:
                libgcc_s.so.1 (GCC_3.0) => /lib/libgcc_s.so.1
                libc.so.6 (GLIBC_2.1.3) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.0) => /lib/libc.so.6
                libstdc++.so.5 (CXXABI_1.2) => /usr/lib/libstdc++.so.5
                libstdc++.so.5 (GLIBCPP_3.2) => /usr/lib/libstdc++.so.5
        /usr/lib/libstdc++.so.5:
                libgcc_s.so.1 (GCC_3.0) => /lib/libgcc_s.so.1
                libc.so.6 (GLIBC_2.1.3) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.2) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.0) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.1) => /lib/libc.so.6
        /lib/libm.so.6:
                libc.so.6 (GLIBC_2.1.3) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.0) => /lib/libc.so.6
        /lib/libgcc_s.so.1:
                libc.so.6 (GLIBC_2.2.4) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.1.3) => /lib/libc.so.6
                libc.so.6 (GLIBC_2.0) => /lib/libc.so.6
        /lib/libc.so.6:
                ld-linux.so.2 (GLIBC_2.1.1) => /lib/ld-linux.so.2
                ld-linux.so.2 (GLIBC_2.2.3) => /lib/ld-linux.so.2
                ld-linux.so.2 (GLIBC_2.1) => /lib/ld-linux.so.2
                ld-linux.so.2 (GLIBC_2.2) => /lib/ld-linux.so.2
                ld-linux.so.2 (GLIBC_2.0) => /lib/ld-linux.so.2
    )
    
    Instead of using the precompiled version, bf(stealth) may be compiled from
its sources.  The compilation may use either the tt(GNU g++) compiler version
3.0x or the tt(3.2x) version. Other versions haven't been tested as of this
writing.  At least one of these compilers must have been installed.

    For the compilation `by hand' a simple script (tt(plain)) is provided in
the tt(stealth-CURVERS) directory. This script can be used to compile
bf(stealth). The following items can be edited:
    itemization(
    it() Select your choice of debug-information that can be obtained. By
default, no code producing extra debug information is created. By making the
following selection, bf(stealth) will contain code producing extra debug
information:
        verb(
    #FLAG=""
    FLAG=-DDEBUG
        )
    it() Select the compiler to use. Use either the tt(g++-3.2) compiler
or the tt(g++ 3.0) compiler. Take your pick. The script comes preselected for
the the tt(g++-3.2) compiler. The following selection (made in the script)
will use the tt(g++-3.0) compiler:
        verb(
    # select one set of the following two defines:
    COMPILER=g++-3.0
    HASHNAMESPACE=std
    # COMPILER=g++-3.2
    # HASHNAMESPACE=__gnu_cxx
        )
    it() Next, run the command
        verb(
    ./plain
        )
    This creates the program bf(stealth) in the same directory as the
tt(plain) script.
    )


       