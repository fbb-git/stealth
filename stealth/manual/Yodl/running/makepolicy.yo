Here we assume that bf(stealth) is run by em(root), and that root wants to
store information about the host tt(client) under the subdirectory
tt(/root/stealth/client). 

Stealth reports should be sent to the user tt(admin@elsewhere), who is only
interested in a short notice of changes, as the full report can always be read
elsewhere. So, a support-script is developed to further filter the report
generated by bf(stealth).

As the tt(sha1sum) program on the client may be hacked, it is a good idea to
transfer the client's tt(sha1sum) program to the controller first, in order to
check that program locally, before trusting it to compute the sha1sums of the
client's files. The same holds true for any libraries and support programs
(like tt(find)) that are used intensively during integrity scans

Sha1sum checks should be performed on all setuid and setgid files on the
tt(client), and in order to be able reach all files on tt(client),
tt(root@controller) is allowed to login to the tt(root@client) account using a
password-less tt(ssh) connection. 

Furthermore, sha1sum checks should be performed on all configuration files,
living under tt(/etc) and on the file tt(/usr/bin/find) which is used
intensively to perform the checks.


The required tt(policy) file is constructed as follows, per section:

subsect(the DEFINE directives)

        verb(
    DEFINE  SSHCMD  /usr/bin/ssh root@client -T -q exec /bin/bash --noprofile
    DEFINE  EXECSHA1 -xdev -perm +u+s,g+s \( -user root -or -group root \) \ 
                    -type f -exec /usr/bin/sha1sum {} \;
        )
    The first tt(DEFINE) defines the tt(ssh) command to use: an ssh-connection
will be made to the root account at the client.
    
    The second tt(DEFINE) shows the arguments for bf(find)(1) when looking for
all root setuid or setgid normal files. For all these files the bf(sha1sum)(1)
program should be run.

subsect(the USE directives)        

        verb(
    USE BASE        /root/stealth/client
    USE EMAIL       admin@elswhere
    USE MAILER      /root/bin/stealthmail
    USE MAILARGS    "Client STEALTH report"
    USE SSH         ${SSHCMD}
        )
    itemization(
    it() All output will be written under the tt(/root/stealth/client)
        directory.
    it() Mail will be sent to the user tt(admin@elsewhere). 
    it() The mail program will be a script (tt(stealthmail)), living in
        tt(/root/bin).  
    it() The script handles its own argument. As it can be used for other
stealth-scans as well, it is given an argument which can be used as the
subject when sending mail, identifying the computer that has been scanned.
    it() The ssh-command is defined by the tt(SSH-DEFINE).
    it() the default values of all remaining tt(USE) directives can be used,
and were therefore not specified. They are:
        verb(
    USE DD          /bin/dd
    USE DIFF        /usr/bin/diff
    USE PIDFILE     /var/run/stealth-
    USE REPORT      report
    USE SH          /bin/sh
        )
    )

subsect(the commands)

First, we'll copy the client's sha1sum program to the controller. In practice,
this should also include the shared object libraries that are used by sha1sum,
as they might have become corrupted as well. 

subsubsect(Obtain the client's sha1sum program)

First, the tt(sha1sum) program is copied to a local directory
        verb(
    GET /usr/bin/sha1sum /root/tmp
        )
    This command must succeed. 

subsubsect(Check the integrity of the client's sha1sum program)

Next, we'll check the received tt(sha1sum) program, using our own:
        verb(
    LABEL \nCheck the client's sha1sum program
    LOCAL CHECK LOG = local/sha1 /usr/bin/sha1sum /root/tmp/sha1sum
        )
    The tt(LABEL) command will write the label to the report file just before
the output of the sha1sum program is generated.

    The tt(LOCAL) command will check the sha1sum of the program copied from the
client. The report is written on the file
tt(/root/stealth/client/local/sha1). If this fails, the program will not
continue, but will alert tt(admin@elsewhere) that the check failed. This is of
course rather serious, as it indicates that either the controller's tt(sha1sum)
is behaving unexpectedly or that the client's tt(sha1sum) program has changed.

    The tt(sha1sum) program em(may) have changed due to a normal upgrade. If
so, tt(admin@elsewhere) will know this, and can (probably) ignore the
warning. The next time bf(stealth) is run, the (now updated) SHA1 value is
used, and it should again match the obtained tt(SHA1) value from the copied
tt(sha1sum) program.

subsubsect(Check the client's /usr/bin/find command)

    The client will use it's tt(find) command intensively: tt(find) is a great
tool for producing files having almost any conceivable combination of
characteristics. Of course, the client's tt(find) command itself must be ok,
as well as the client's tt(sha1sum) program. Now that we know that the client's
tt(sha1sum) program is ok, we can use it to check the client's tt(/usr/bin/find)
program. 

Note that the controller itself will not suffer any processing load here: only
the client itself is taxed for checking the intergrity of its own files:
        verb(
    LABEL \nchecking the client's /usr/bin/find program
    CHECK LOG = remote/binfind /usr/bin/sha1sum /usr/bin/find
        )

subsubsect(Check the client's setuid/setgid files)

    Having checked the client's tt(sha1sum) and tt(find) programs, sha1 checksum
checks should be performed on all setuid and setgid files on the
client. For this we activate the tt(sha1sum) program on the client. In
order to check the setuid/setgid files, the following command is added to the
policy file:
        verb(
    LABEL \nsuid/sgid/executable files uid or gid root on the / partition     
    CHECK LOG = remote/setuidgid /usr/bin/find / ${EXECSHA1}
        )

subsubsect(Check the configuration files in the client's /etc/ directory)

    Finally, the client's configuration files are checked. Some of these files
change so frequently that we don't want them to be checked. E.g.,
tt(/etc/adjtime, /etc/mtab). To check the configuration file, do:
        verb(
    LABEL \nconfiguration files under /etc
    CHECK LOG = remote/etcfiles                         \ 
          /usr/bin/find /etc -type f -not -perm +6111   \ 
            -not -regex "/etc/\(adjtime\|mtab\)"        \ 
            -exec /usr/bin/sha1sum {} \;
        )

subsect(The complete `policy' file)

Here is the complete policy file that we've constructed so far:

    verbinclude(running/policy.demo)

