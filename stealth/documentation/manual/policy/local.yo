    bf(LOCAL) commands can be used to specify commands that are 
executed on the monitor itself. The following bf(LOCAL) commands are
available: 
    itemization(
    it() bf(LOCAL) tt(command)

        Execute tt(command) on the monitor, using the bf(SH) command
shell. The command must succeed (i.e., must return a zero exit value). 
    Example:
        verb(    LOCAL mkdir /tmp/client)
    This command creates the directory tt(/tmp/client) on the monitor.

    it() bf(LOCAL NOTEST) tt(command)

        Execute tt(command) on the monitor, using the bf(SH) command
shell. The command may or may not succeed.
    Example:
        verb(    LOCAL NOTEST mkdir /tmp/subdir)
    This command creates tt(/tmp/subdir) on the monitor. The command
fails if the directory cannot be created, but this does not terminate
s().

    it() bf(LOCAL CHECK) [bf(LOG =)] tt(logfile [pathOffset] command)

        Execute tt(command) on the monitor, using the bf(SH) command
shell. The command must succeed. The output of this command is compared to the
output of this command generated during the previous integrity check run by
s().

    The phrase bf(LOG =) is optional. When a relative file location is
specified at tt(<file-spec>) it is interpreted relatively to the tt(USE BASE)
path specification. 

    tt(PathOffset) is also optional. If specified it defines the (0-based)
offset where path-names of inspected files start in lines produced by
tt(<command>). By default s() assumes that the first occurrence of a forward
slash defines the first character of the path-names of inspected files.

    For example, if diff-output looks like this:
        verb(
    01234567890123456789012345678901234567890 (column offsets, not part of 
                                               the diff-output)

    33c33
    < 90d8b506d249634c4ff80b9018644567  filename-specification
    ---
    > b88d0b77db74cc4a742d7bc26cdd2a1e  filename-specification)
    then the specification
        verb(    LOCAL CHECK logfile 36 command-to-be-executed)
    informs s() where to find the filename specifications in the
diff-output. Using the standard tt(/usr/bin/diff) command, this offset equals
2 + the offset of the tt(filename-specification) found in
tt(command-to-be-executed). 

If the command does not succeed a em(warning) message is written to the report
file. The warning message informs the reader that `remaining results might be
forged:
        verb(    *** BE CAREFUL *** REMAINING RESULTS MAY BE FORGED)
    This situation may occur, e.g., if an essential program (like tt(sha1sum))
was transferred to the monitor, and it was apparently modified since the
previous check. Processing continues, but remaining checks performed at the
client computer should be interpreted with em(extreme) caution.

    The output of this command is compared to the output of this command
generated during the previous run of s(). Any differences are written
to bf(REPORT). 

    If differences were found, the existing tt(logfile) name is renamed to
tt(logfile.YYYYMMDD-HHMMSS), with tt(YYYYMMDD-HHMMSS) the datetime-stamp at
the time s() was run.

    Over time, many tt(logfile.YYMMDD-HHMMSS) files could be accumulated.
It is up to the monitor's systems manager to decide what to do
with old datetime-stamped logfiles. For instance, the following script
removes  all s() reports below the current directory that are
older than 30 days:
        verb(    #/bin/sh
    FILES=`find ./ -path '*[0-9]' -mtime +30 -type f`

    if [ "$FILES" != "" ] ; then
        rm -f $FILES
    fi)

    The tt(logfile) specifications may use relative and absolute paths. When
relative paths are used, these paths are relative to bf(BASE). When the
directories implied by the tt(logfile) specifications do not yet exist, they
are created first.

    Example:
        verb(    LOCAL CHECK LOG = local/sha1sum sha1sum /tmp/sha1sum)
    This command will check the SHA1 sum of the tt(/tmp/sha1sum) program. The
resulting output is saved at bf(BASE)tt(/local/sha1sum). The program must
succeed (i.e., tt(sha1sum) must return a zero exit-value).

    it() bf(LOCAL NOTEST CHECK)  [bf(LOG =)] tt(logfile [pathOffset] command)

        Execute tt(command) on the monitor, using the bf(SH) command
shell. 

    The phrase bf(LOG =) is optional. When a relative file location is
specified at tt(<file-spec>) it is interpreted relatively to the tt(USE BASE)
path specification. 

The command may or may not succeed. Otherwise, the program performs exactly
like the bf(LOCAL CHECK ...)  command, discussed above.

    Example:
        verb(    LOCAL NOTEST CHECK LOG=local/sha1sum sha1sum /tmp/sha1sum)
    This command will check the SHA1 sum of the tt(/tmp/sha1sum) program. The
resulting output is saved at bf(BASE)tt(/local/sha1sum). The program may or may
not succeed (i.e., tt(sha1sum) may or may not return a zero exit-value).
    )
