When s() performs integrity scans it will append information to the
report file. This file will therefore eventually grow to a large size, and the
systems manager controlling s() might want to em(rotate) the report
file every once in a while (e.g., using a program like bf(logrotate)(1), also
see the upcoming section ref(LOGROTATE)). In
order to ensure that no log-rotation takes place while s() is busy
performing integrity scans (thus modifying the report file) the options
bf(--suppress) and tt(--resume) were implemented. Both options require the
process-ID file of currently active s() process as their argument.

For example, if a s() process was once started using the command
    COMMENT(KEEP A BLANK FOLLOWING THE BACKSLASH)
        verb(
    stealth -q --daemon /var/run/stealth.small --repeat 900 \ 
                    /var/stealth/policies/small.pol
        )
    then the tt(--suppress) and tt(--resume) commands for this process should
be formulated as:
        verb(
    stealth --suppress /var/run/stealth.small
    stealth --resume /var/run/stealth.small
        )
    The s() process identified in the files provided as arguments to
the tt(--suppress) and tt(--resume) options is called the em(targeted stealth
process) below.

The tt(--suppress) option has the following effect:
    itemization(
    it() If the targeted s() process is currently processing its
policy file, performing a (new) integrity scan, then the currently executing
policy file command is completed, whereafter further commands are ignored,
except for tt(--resume) (see below) and tt(--terminate).
    it() Any scheduled integrity scans following the tt(--suppress) command
are ignored for the targeted s() process;
    it() The targeted s() process will write a message that it is
being suppressed to the report file and will then process the report file as
usual;
    it() The targeted s() process relinquishes its control over the
report file;
    it() The command `s() tt(--suppress pidfile)' terminates.
    )
    Now that the report file will no longer be affected by the targeted
s() process, log-rotation may take place. E.g., a program like
bf(logrotate)(1) allows its users to specify a command or script just before
log-rotation takes place, and `s() tt(--suppress pidfile)' could be
specified nicely in such a pre-rotation section.

The tt(--resume) option has the following effect:
    itemization(
    it() The targeted s() process resumes its activities by performing
another integrity scan. Thus, tt(--resume) implies tt(--rerun).
    it() Any scheduled integrity scans following the tt(--resume) command are
again honored by the targeted s() process, following the completion of
the tt(--resume) command.
    it() The command `s() tt(--resume pidfile)' terminates.
    )
    Note that, once tt(--suppress) has been issued, all commands except
tt(--resume) and tt(--terminate) are ignored by the targeted s()
process. While suppressed, the tt(--terminate) command is acknowledged as a
`emergency exit' which may or may not interfere with, e.g., an ongoing
log-rotation process. The targeted s() process should not normally be
terminated while it is in its suppressed mode. The normal way to terminate a
stealth process running in the background is:
    itemization(
    it() Wait for the  targeted s() process to complete a series of
integrity scans;
    it() Issue the `s() tt(--terminate pidfile)' command.
    )

