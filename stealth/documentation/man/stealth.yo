includefile(../../release.yo)

htmlbodyopt(text)(#27408B)
htmlbodyopt(bgcolor)(#FFFAF0)

gagmacrowarning(stealth Stealth)
mailto(f.b.brokken@rug.nl)

DEFINEMACRO(s)(0)(bf(stealth))
DEFINEMACRO(S)(0)(bf(Stealth))

manpage(stealth)(1)(_CurYrs_)(stealth__CurVers_.tar.gz)(Security Enhancement)

manpagename(stealth)(Stealthy File Integrity Scanner)

manpagesynopsis()
        s()  -dcnoq -i <interval> -r <nr> -s skip-files nl()
            [--max-size <size>[BKMG] ] nl()
            [--keep-alive pidfile [--repeat <seconds> ] ]  policy nl()
        s()  {--reload,--rerun,--resume,--suppress,--terminate} pidfile

manpagedescription()

    The name of the s() program is an acronym of:
    quote(
    bf(SSH-based Trust Enforcement Acquired through a Locally Trusted Host.)
    )
    s() is based on an idea by em(Hans Gankema) and em(Kees Visser), both at
the Center for Information Technology of the University of Groningen. em(Hopko
Meijering) provided valuable suggestions for improvement.

    s()'s main task is to perform file integrity tests. However, the
testing itself will leave no sediments on the tested computer. Therefore,
s() has em(stealthy) characteristics. This is considered an
important feature, improving the security (integrity) of the software of
computers monitored by s().

    On the other hand, one should realize that s() intends to be just
another security tool: other security measures like firewalls, portscanners,
intrusion detection systems, abolishment of unencrypted protocols, etc. are
usually required to improve or promote the security of a group of computers
that are connected to the Internet.

    s() uses a policy file to determine the actions to perform. Each
policy file is uniquely associated with a host to be tested. This remote host
(called the em(client) below) trusts the computer on which s() runs
(hence: a em(Locally Trusted Host)), called the em(controller). The controller
performs tasks (normally file integrity tests) that em(Enforce) the em(Trust)
we have in the client computer. Since almost all integrity tests can be run
on the client, one controller can control many clients, even if the
controller itself uses aged hardware components.

As the controller and the client normally are different computers, the
controller must communicate with the client in a secure fashion. This is
realized using SSH. So, there's another element of `local trust' involved
here: the client should permit the controller to set up a secure SSH
connection allowing the controller to access sensitive files and private parts
of the client's file system.

    bf(It is important to ensure that there is no public access to the
controller. All inbound services should be denied. The only access to
the controller should be via its console and the controller should be placed
in a physically secure location. Sensitive information of clients are stored
in the controller, and passwordless access to clients can be obtained from the
controller by anyone who gains (root)-access).

    The controller itself only needs two kinds of outgoing services:
bf(SSH) to reach its clients, and some mail transport agent (e.g.,
bf(sendmail)(1)) to forward its outgoing mail to some mail-hub.

    Here is what happens when s() is run using the first synopsis:
    itemization(
    it() First, the em(policy) file is read. This determines the actions to be
performed, and the values of several variables that are used by s().
    it() If the command-line option tt(--keep-alive pidfile) is specified,
s() will run as a backgrond process, writing its process id in the file
tt(pifile).  With tt(--repeat <seconds>) the scan will be rerun every
tt(<seconds>) seconds. The number of seconds until the next rerun will be at
least 60. However, using the tt(--rerun pidfile) option a background s()
process may always be forced into its next scan. When tt(--keep-alive) is
specified the scan will be performed just once, whereafter bf(PROGRAM) will
wait until it is reactivated by another run of s(), called using the
tt(--rerun pidfile) command-line option (note that integrity scans are
suppressed between a tt(--suppress) and a tt(--resume) command, see below).
Consider specifying  tt(--quiet) (see below) when tt(--keep-alive) is used.
    it() Then, the controller opens a command shell on the client using
bf(ssh)(1), and a command shell on the controller itself using bf(sh)(1).
    it() Next, commands defined in the policy file are executed in their order
of appearance. Examples are given below. Normally, return values of the
programs are  tested. Non-zero return values will terminate s()
prematurely. In this case, a message about the reason why s() terminated is
written to the report file (and into the mail message sent by s()). In some
cases (e.g., when the report file could not be written), the message is
written to the standard error stream.
    it() In most cases, integrity tests can be controlled by the bf(find)(1)
program, calling programs like bf(ls)(1), bf(sha1sum)(1) or its own
tt(-printf) method to produce file-integrity related statistics. Most of these
programs write file names at the end of generated lines. This characteristic
is used by an internal routine of s() to detect changes in the generated
output, which could indicate some harmful intent, like an installed
em(root-kit).
    it() When changes are detected, they are logged on a em(report file), to
which information is always appended. s() never reduces or rewrites the
report file. Whenever information is added to the report file (exceeding a
plain time stamp) the appended information is emailed to a configurable email
address for further (human) processing. Usually this will be the systems
manager of the tested client. s() follows the `dark cockpit' approach in
that no mail is sent when no changes were detected.
    it() When the tt(--repeat) or tt(--rerun) options are issued, the report
file should not be rotated by, e.g., a log-rotating process, but the report
file may safely be rotated between a pair of tt(--suppress) and tt(--resume)
commands. 
    )

manpagesection(REPORT FILE ROTATION)
    Since s() only appends information to the report file, it will
eventually grow to a large file, and log-rotation may be desirable. It is of
course possible to issue a tt(--terminate) command, rotate the logfiles, and
restart s(), but s() also offers a facility to temporarily suppress
further scans:
    itemization(
    it() Starting s() using the option tt(--suppress pidfile) will
            suppress a currently active s() process. If s() is
            actually performing a series of integrity scans when
            tt(--suppress) is issued, the currently executing command is first
            completed before the tt(--suppress) command completes. Once
            tt(--suppress) is active, all scheduled scans
            are skipped and tt(--rerun) is ignored. However, the 
            tt(--resume) and tt(--terminate) options are still handled.
    it() Once `s() tt(--suppress pidfile)' has returned, the report file
            may safely be rotated (using, e.g., bf(logrotate)(1)), and a new
            (empty) report file may optionally be created by the logrotation
            process.
    it() Finally, when the log-rotation has been completed, the log-rotation
            process should issue the command `s() tt(--resume
            pidfile)'. This will resume a suppressed s() process,
            immediately performing the next integrity scan (thus implying 
            tt(--rerun)), whereafter s() will be back in its normal
            integrity scanning mode (so, resuming repeated scans if
            originally requested so).
    )
    Here is an example of bf(logrotate)(1) specification rotating s()
log-files:
        verb(
/root/stealth/host/report {
    weekly
    rotate 12
    compress
    missingok
    prerotate
        /usr/bin/stealth --suppress /run/stealth.host
    endscript
    postrotate
        /usr/bin/stealth --resume /run/stealth.host
    endscript 
}
        )

manpagesection(RELOAD, RERUN AND TERMINATE)

    Here is what happens when s() is run using other synopses:
    itemization(
    it() When started using the tt(--reload pidfile) command-line option,
the s() process reloads its configuration files (policy file and
tt(--skip-files) specification file, if specified), immediately followed by a
s() run, using the information in the reloaded files.
    it() When started using the tt(--rerun pidfile) command-line option, the
s() process associated with process id file tt(pidfile) will perform
another scan. This command has no effect following a tt(--suppress) command.
    it() When started using the tt(--terminate pidfile) command-line option,
the s() process associated with process id file tt(pidfile) is terminated.
    )

    manpagesection(OPEN SSH LINK TO CLIENTS)

    The tt(--keep-alive, --repeat, --rerun, --resume) and tt(--suppress)
options were implemented in such a way that the bf(ssh) link to the client
remains open, thus minimizing the number of bf(sshd) entries caused by
bf(PROGRAM) in the client's log files.

    nsect(THE POLICY FILE)

    The policy file consists of two sets of data: em(use directives) (starting
with the keyword bf(USE)) and em(commands). Blank lines and information beyond
hash-marks (#) are ignored, while lines following lines terminating in
backslashes (\) will be concatenated (em(en passant) removing the
backslashes). Initial white space on lines of the policy file is ignored.

nsect(DEFINE DIRECTIVES)

    bf(DEFINE) directives may be used to associate longer strings of text with
certain symbols. E.g., after
    tt(DEFINE FINDARGS -xdev -type f -exec /usr/bin/sha1sum {} \;)
    the text tt(${FINDARGS}) may be used in bf(USE DIRECTIVES) and
bf(commands) (see below) to use the text associated with the bf(FINDARGS)
symbol. 

    Note that bf(DEFINE) symbols may be used in the definition of 
other bf(DEFINE) symbols as well. Direct or indirect circular definitions
should be avoided, as they are either not or incompletely expanded.

nsect(USE DIRECTIVES)

    The following bf(USE) directives may be specified (directives are written
in capitals, and should appear exactly as written below: letter casing is
preserved). Specifications in angular brackets (like tt(<this>)) represent
specifications to be given by users of s():
    itemization(
    it() bf(USE BASE) tt(<basedirectory>)nl()
        bf(BASE) defines the directory from where s() operates. All
relative path specifications are interpreted relative to bf(BASE). em(By
default) this is the directory where s() was started. nl()
    bf(BASE) and other non-existing paths are created automatically by
s() if not yet existing.nl()
    Example:nl()
    tt(USE BASE /root/client)

    it() bf(USE DD) tt(<dd>)nl()
        The bf(DD) specification uses tt(/bin/dd) as default, and defines the
location of the bf(dd)(1) program, both on the server and on the client. The
bf(bin)(1) program is used to copy files between the client and the controller
without opening separate ssh-connections. The program specified here is only
used by s() for the tt(PUT) and tt(GET) commands, described below.nl()
    Example showing the default:nl()
    tt(USE DD /bin/dd)

    it() bf(USE DIFF) tt(<diff>)nl()
        The bf(DIFF) specification uses tt(/usr/bin/diff) as default,
and defines the location of the bf(diff)(1) program on the controller. The
bf(diff)(1) program is used to compare a formerly created logfile of an
integrity check with a newly created logfile.nl()
    Example showing the default:nl()
    tt(USE DIFF /usr/bin/diff)

    it() bf(USE DIFFPREFIX) tt(<prefix>)nl()
        The bf(DIFFPREFIX) specification defines the size of the prefix added
by the tt(DIFF) command to lines produced by commands executed through s().
The default tt(/usr/bin/diff) program prefixes lines by either `tt(> )' or
`tt(< )'. The default value for tt(<prefix>) is therefore equal to 2.nl()
    Example showing the default:nl()
    tt(USE DIFFPREFIX 2)

    it() bf(USE EMAIL) tt(<address>)nl()
        The bf(EMAIL) specification defines the email-address to receive the
report of the integrity scan of the client. The `dark cockpit' philosophy is
followed here: mail is only sent when a modification is detected.nl()
    Example showing the default (apparently an email address on the
controller):nl()
    tt(USE EMAIL root)

    it() bf(USE MAILER) tt(<mailer>)nl()
        The bf(MAILER) specification defines the program that is used to send
the mail to the bf(EMAIL)-address. Contrary to bf(DIFF) and bf(DD) and (see
below) bf(SH) and bf(SSH), bf(MAILER) is run as a tt(/bin/sh) command, to
allow shell-scripts to process the mail too. By default bf(MAILER) is defined
as bf(/usr/bin/mail)(1). bf(MAILER) is called with the following
arguments:nl()
    ----------------------------------------------------------nl()
    bf(MAILARGS), see below;nl()
    bf(EMAIL), the addressee of the mail.nl()
    ----------------------------------------------------------nl()
    Example showing the default:nl()
    tt(USE MAILER /usr/bin/mail)

    As an alternative, the script tt(stealthmail) is provided. It offers a
convenient filter sorting s()'s output and keeping only lines containing
tt(ADDED), tt(MODIFIED), tt(REMOVED) and tt(STEALTH). Usually these lines are
are the ones system managers are interested in. The report and log files can
always be consulted to determine the actual nature of the changes.

    it() bf(USE MAILARGS) tt(<args>)nl()
        The bf(MAILARGS) specification defines the arguments that are passed
to tt(MAILER), followed by the specification of tt(EMAIL).
    Example showing the default:nl()
    tt(USE MAILARGS -s "STEALTH scan report")nl()
    Note that blanks may be used in the subject specification: use double or
single quotes to define elements containing blanks. Use tt(\") to use a double
quote in a string that is itself delimted by double quotes, use tt(\') to use
a single quote in a string that is itself delimted by single quotes. 

    it() bf(USE REPORT) tt(<reportfile>)nl()
        bf(REPORT) defines the name of the reportfile. Information is always
appended to this file. For each run of s() a em(time marker line) is
written to the report file. Only when (in addition to the marker line)
additional information is appended to the report file the added contents of
the report file are mailed to the mail address specified in the bf(USE EMAIL)
specification.nl()
    Example showing the default:nl()
    tt(USE REPORT report)

    it() bf(USE SH) tt(<sh>)nl()
        The bf(SH) specification uses tt(/bin/sh) as default, and defines the
command shell used by the controller to execute commands on itself.nl()
    Example showing the default:nl()
    tt(USE SH /bin/sh)

    it() bf(USE SSH) tt(<user>)nl()
        bf(The SSH specification has no default), and em(must) be
specified. Assuming the client em(trusts) the controller (which is, after all,
what this program is all about; so this should not be a very strong
assumption), preferably the public ssh-identity key of the controller should
be placed in the client's root tt(.ssh/authorized_keys) file, granting the
controller root access to the client. Root access is normally needed to gain
access to all directories and files of the client's file system.

    In practice, connecting to a account using the bf(sh)(1) shell is
preferred. When another shell is already used by that account, one should make
sure that that shell doesn't setup its own redirections for standard input and
standard output. One way to accomplish that is for force the execution of
tt(/bin/sh) in the bf(USE SSH) specification. 
    Examples:
        verb(
    # root's shell is /bin/sh:
        USE SSH root@client -T -q    
    # root uses another shell
        USE SSH root@client -T -q exec /bin/bash    
    # an alternative:
        USE SSH root@client -T -q exec /bin/bash --noprofile 
        )    
    )

    In some installations s() is used to inspect the computer itself, even
though this is em(not) recommended, as it counters one of the main reasons
for s()'s existence. In situations where s() is used to monitor the integrity
of the tt(localhost), tt(/bin/bash) could be specified with the tt(USE SSH)
directive. For example:
        verb(
    # For stealth inspecting localhost:
        USE SSH /bin/bash --noprofile
        )

nsect(COMMANDS)

    Following the bf(USE) specifications, em(commands) can be specified. The
commands are executed in their order of appearance in the policy
file. Processing continues until the last command has been processed or until
a tested command (see below) returns a non-zero return value.

nsect(LABEL COMMANDS)
    
    The following bf(LABEL) commands are available:
    itemization(
    it() bf(LABEL) tt(<text>)nl()
        This defines a text-label which is written to the bf(REPORT) file,
in front of the output generated by the next bf(CHECK)-command. If the next
bf(CHECK)-command generates no output, the text-label is not written to the
bf(REPORT)-file. Once a bf(LABEL) has been defined, it is used until it is
redefined by the next bf(LABEL). Use an empty bf(LABEL) specification to
suppress the printing of labels.

    The text may contain tt(\n) characters (two characters) which are
transformed to a newline character.

    Example:nl()
    tt(LABEL Inspecting files in /etc\nIncluding subdirectories)nl()
    tt(LABEL) nl()
        (The former bf(LABEL) specification clears the latter label text).
    )

nsect(LOCAL COMMANDS)

    The following bf(LOCAL) commands are available to be executed on the
controller:
    itemization(
    it() bf(LOCAL) tt(<command>)nl()
        Execute tt(command) on the controller, using the bf(SH) command
shell. The command must succeed (i.e., must return a zero exit value). nl()
    Example:nl()
    tt(LOCAL scp rootsh@client:/usr/bin/sha1sum /tmp)nl()
    This command will copy the client's bf(sha1sum)(1) program to the
controller.

    it() bf(LOCAL NOTEST) tt(<command>)nl()
        Execute tt(command) on the controller, using the bf(SH) command
shell. The command may or may not succeed.nl()
    Example:nl()
    tt(LOCAL NOTEST mkdir /tmp/subdir)nl()
    This command will create tt(/tmp/subdir) on the controller. The command
will fail if the directory cannot be created, but this will not terminate
s().

    it() bf(LOCAL CHECK) [bf(LOG =)] tt(<logfile> [pathOffset] <command>)nl()
        Execute tt(command) on the controller, using the bf(SH) command
shell. The command must succeed. The output of this command is compared to the
output of this command generated during the previous run of s(). The phrase
bf(LOG =) is optional. The tt([pathOffset]) is also optional. If specified it
defines the (0-based) offset where path-names of inspected files start in
lines produced by tt(<command>). By default s() assumes that the
first occurrence of a forward slash defines the first character of the
path-names of inspected files. 

    For example, if diff-output looks like this:
        verb(
    01234567890123456789012345678901234567890 (column offsets)
    33c33
    < 90d8b506d249634c4ff80b9018644567  filename-specification
    ---
    > b88d0b77db74cc4a742d7bc26cdd2a1e  filename-specification
        )
    then the specification
        verb(
    LOCAL CHECK logfile 36 command-to-be-executed
        )
    informs s() where to find the filename specifications in the
diff-output. Using the standard tt(/usr/bin/diff) command, this offset equals
2 + the offset of the tt(filename-specification) found in
tt(command-to-be-executed). 

Any differences between the previous and current output are written to
bf(REPORT). If differences were found, the existing tt(logfile) name is
renamed to tt(logfile.YYMMDD-HHMMSS), with tt(YYMMDD-HHMMSS) the
datetime-stamp at the time s() was run.

    Note that eventually many tt(logfile.YYMMDD-HHMMSS) files could be
created: It is up to the controller's systems manager to decide what to do
with old datetime-stamped logfiles.

    The tt(logfile) specifications may use relative and absolute paths. When
relative paths are used, these paths are relative to bf(BASE). When the
directories implied by the tt(logfile) specifications do not yet exist, they
are created first.

    Example:nl()
    tt(LOCAL CHECK LOG = local/sha1sum sha1sum /tmp/sha1sum)nl()
    This command will check the SHA1 sum of the tt(/tmp/sha1sum) program. The
resulting output is saved at bf(BASE)tt(/local/sha1sum). The program must
succeed (i.e., tt(sha1sum) must return a zero exit-value).

    it() bf(LOCAL NOTEST CHECK) tt(<logfile>  [pathOffset] <command>)nl()
        Execute tt(command) on the controller, using the bf(SH) command
shell. The command may or may not succeed. Otherwise, the command performs
exactly like the bf(LOCAL CHECK ...) command, discussed above.

    Example:nl()
    tt(LOCAL NOTEST CHECK LOG=local/sha1sum sha1sum /tmp/sha1sum)nl()
    This command will check the SHA1 sum of the tt(/tmp/sha1sum) program. The
resulting output is saved at bf(BASE)tt(/local/sha1sum). The program must
succeed (i.e., tt(sha1sum) must return a zero exit-value).
    )

    Note that the bf(scp)(1) command can be used to copy files between the
client and the controller, using a local command. This, however, is
discouraged, as a separate bf(ssh)(1)-connection is required for each separate
bf(scp)(1) command. This subtlety was brought to the author's attention by
Hopko Meijerink (tt(h.meijering@rc.rug.nl)). Using bf(scp)(1) results in
several additional entries showing bf(sshd)(1) connections in the client's
logfiles, which in turn may provide hints to a hacker that the client is
intensively monitored. In order to copy files between the client and the
controller, the tt(GET) and tt(PUT) commands (described below) may be used,
which use the existing bf(ssh)(1) connection. In general, tt(LOCAL) commands
should not be used to establish additional bf(ssh)(1) connections to a client.

nsect(REMOTE COMMANDS)

    Remote commands are commands executed on the client using the bf(SSH)
shell. These commands are executed using the standard tt(PATH) set for the
bf(SSH) shell. However, it is advised to specify the full pathname to the
programs to be executed, to prevent ``trojan approaches'' where a trojan horse
is installed in an `earlier' directory of the tt(PATH)-specification than the
intended program.

    Two special remote commands are tt(GET) and tt(PUT), which can be used to
copy files between the client and the controller.  Internally, tt(GET) and
tt(PUT) use the tt(DD) use-specification. If a non-default specification is
used, one should ensure that the alternate program accepts bf(dd)(1)'s tt(if=,
of=, bs=) and tt(count=) options. With tt(GET) the options tt(bs=, count=) and
tt(of=) are used, with tt(PUT) the options tt(bs=, count=) and tt(if=) are
used. Normally there should be no need to alter the default tt(DD)
specification.

    The tt(GET) command may be used as follows:
    itemization(    
    it() bf(GET) tt(<client-path> <local-path>)nl()
    Copy the file indicated by tt(client-path) at the client to tt(local-path)
at the controller. tt(client-path) must be the full path of an existing file
on the client, tt(local-path) may either be a local directory, in which case
the client's file name is used, or another file name may be specified, in
which case the client's file is copied to the specified local filename. If the
local file already exists, it is overwritten by the copy-procedure.

    Example:nl()
    tt(GET /usr/bin/sha1sum /tmp)nl()
    The program tt(/usr/bin/sha1sum), available at the client, is copied to the
controller's tt(/tmp) directory. If the copying fails for some reason,
any subsequent commands are skipped, and bf(stealth) terminates.

    it() bf(GET NOTEST) tt(<client-path> <local-path>)nl()
    Copy the file indicated by tt(client-path) at the client to tt(local-path)
at the controller. tt(client-path) must be the full path of an existing file
on the client, tt(local-path) may either be a local directory, in which case
the client's file name is used, or another file name may be specified, in
which case the client's file is copied to the specified local filename. If the
local file already exists, it is overwritten by the copy-procedure.

    Example:nl()
    tt(GET NOTEST /usr/bin/sha1sum /tmp)nl()
    The program tt(/usr/bin/sha1sum), available at the client, is copied to the
controller's tt(/tmp) directory. Remaining commands in the policy file are
executed, even if the copying process wasn't successful.
    )

    The tt(PUT) command may be used as follows:
    itemization(    
    it() bf(PUT) tt(<local-path> <remote-path>)nl()
    Copy the file indicated by tt(local-path) at the controller to
tt(remote-path) at the client. The argument tt(local-path) must be the
full path of an existing file on the controller. The argument tt(remote-path)
must be the full path to a file on the client. If the remote file already
exists, it is overwritten by tt(PUT).

    Example:nl()
    tt(PUT /tmp/sha1sum /usr/bin/sha1sum)nl()
    The program tt(/tmp/sha1sum), available at the controller, is copied to the
client as tt(usr/bin/sha1sum). If the copying fails for some reason,
any subsequent commands are skipped, and bf(stealth) terminates.

    it() bf(PUT NOTEST) tt(<local-path> <remote-path>)nl()
    Copy the file indicated by tt(local-path) at the controller to
tt(remote-path) at the client. The argument tt(local-path) must be the
full path of an existing file on the controller. The argument tt(remote-path)
must be the full path to a file on the client. If the remote file already
exists, it is overwritten by tt(PUT).

    Example:nl()
    tt(PUT NOTEST /tmp/sha1sum /usr/bin/sha1sum)nl()
    Copy the file indicated by tt(local-path) at the controller to
tt(remote-path) at the client. The argument tt(local-path) must be the full
path of an existing file on the controller. The argument tt(remote-path) must
be the full path to a file on the client. If the remote file already exists,
it is overwritten by tt(PUT). Remaining commands in the policy file are
executed, even if the copying process wasn't successful.
    )

    Plain commands can be executed on the client computer by merely specifying
them. Of course, this means that programs on the client called, e.g.,
tt(LABEL), tt(LOCAL) or tt(USE), cannot be executed, since these names are
interpreted otherwise by s(). I don't think that represents much of a
problem, though....

    The following commands are available to be executed on the client:
    itemization(
    it() tt(<command>)nl()
        Execute tt(command) on the client, using the bf(SSH) command
shell. The command must succeed (i.e., must return a zero exit
value). However, any output generated by the the command is ignored. nl()
    Example:nl()
    tt(/usr/bin/find /tmp -type f -exec /bin/rm {} \;)nl()
    This command will remove all ordinary files in and below the client's
tt(/tmp) directory.

    it() bf(NOTEST) tt(<command>)nl()
        Execute tt(command) on the client, using the bf(SSH) command
shell. The command may or may not succeed.nl()
    Example:nl()
    tt(NOTEST /usr/bin/find /tmp -type f -exec /bin/rm {} \;)nl()
    Same as the previous command, but this time the exit value of
tt(/usr/bin/find) is not interpreted.

    it() bf(CHECK) [bf(LOG =)] tt(<logfile>  [pathOffset] <command>)nl()
        Execute tt(command) on the client, using the bf(SSH) command
shell. The phrase bf(LOG = ) is optional. The tt([pathOffset]) specification
is also optional, and has the same meaning as for the tt(LOCAL CHECK) command,
described above. The command must succeed. The output of this command is
compared to the output of this command generated during the previous run of
s(). Any differences are written to bf(REPORT). If differences were found, the
existing tt(logfile) name is renamed to tt(logfile.YYMMDD-HHMMSS), with
tt(YYMMDD-HHMMSS) the datetime-stamp at the time s() was run.

    Note that the command is executed on the client, but the logfile is kept
on the controller. This command represents the core of the method implemented
by s(): there will be no residues of the actions performed by s() on
the client computers.

    Several examples (note the use of the backslash as line continuation
characters):

tt(CHECK LOG = remote/ls.root \)nl()
tt(    /usr/bin/find / \)nl()
tt(    -xdev -perm +6111 -type f -exec /bin/ls -l {} \;)

    All suid/gid/executable files on the same device as the root-directory (/)
on the client computer are listed with their permissions, owner and size
information. The resulting listing is written on the file
bf(BASE)tt(/remote/ls.root).


tt(CHECK remote/sha1.root \)nl()
tt(    /usr/bin/find / \)nl()
tt(    -xdev -perm +6111 -type f -exec /usr/bin/sha1sum {} \;)

    The SHA1 checksums of all suid/gid/executable files on the same device as
the root-directory (/) on the client computer are determined.  The resulting
listing is written on the file bf(BASE)tt(/remote/sha1.root).

    it() bf(NOTEST CHECK) [bf(LOG =)] tt(<logfile> [pathOffset] <command>)nl()
        Execute tt(command) on the client, using the bf(SSH) command
shell. The phrase bf(LOG =) is optional. The tt([pathOffset]) is also
optional, and has the same meaning as for the tt(LOCAL CHECK) command,
described above. The command may or may not succeed. Otherwise, the program
acts identically as the bf(CHECK ...) command, described above.

    Example:nl()
tt(NOTEST CHECK LOG = remote/sha1.root \)nl()
tt(    /usr/bin/find / \)nl()
tt(    -xdev -perm +6111 -type f -exec /usr/bin/sha1sum {} \;)


    The SHA1 checksums of all suid/gid/executable files on the same device as
the root-directory (/) on the client computer are determined.  The resulting
listing is written on the file bf(BASE)tt(/remote/sha1.root). s() will not
terminate if the tt(/usr/bin/find) program returns a non-zero exit value.
    )

    The maximum download size (using GET or CHECK) can be specified using the
tt(--max-size) option, see below. By default it is set at 10M.


manpagesection(OPTIONS)

    Long options are given immediately following the short-option
equivalents, if available. Either can be used.

    itemization(
    it() tt(-d --debug): Write debug messages to std error;
    it() tt(-c --parse-config-file): 
            Process the config file, no further action,nl()
            report the results to std output;
    it() tt(-e --echo-commands):
            echo commands to std error when they are processed (implied by 
            tt(-d));
    it() tt(-i --random-interval <interval>[m]>): 
            start the scan a random interval of <interval> seconds (or 
            minutes if an `m' is appended to <interval>) following the delay
            specified at tt(--repeat) (see below). This option is ignored
            unless tt(--repeat) is provided as well.
    it() tt(-n --no-child-processes): No child processes are executed: 
                child actions+nl()
                 are faked to be OK.
    it() tt(-o --only-stdout): Scan report is written to stdout. 
            No mail is sent.nl()
           (implied by -d);
    it() tt(-q --quiet): Suppress progress messages written to stderr;
    it() tt(-r --run-command <nr>): Only run command <nr> (natural number). 
            Command numbers are shown by s() tt(-c);
    it() tt(-s --skip-files <skippath>): All entries in tt(skippath)
(specified using an em(absolute path)) are skipped. Their integrity is not
monitored. If an entry is already present in a log file then s() will once
generate an tt(IGNORING) message in the mail sent to the address specified at
tt(EMAIL) in the policy file. Each entry mentioned in tt(filepath) must be on a
line of its own and must be specified using absolute paths. Entries ending in
a slash are assumed to be directories whose contents must be skipped. Other
entries are interpreted as the path names of files to skip. Initial and
trailing blanks, empty lines and lines having a tt(#) as their 1st non blank
character are ignored.
    it() tt(-v --version): Display version information and exit;
    it() tt(--keep-alive pidfile): Keep running as a daemon, 
            wake up at interrupts. 
    it() tt(--max-size <size>[BKMG]): the maximum file size that can be
            downloaded from the client in bytes (B), Kbytes (K), Mbytes (M),
            Gbytes (G). By default download size is 10M. When specified, the
            default unit is B.
    it() tt(--repeat <seconds>): keep running as a daemon, wake up at
            interrupts or after <seconds> seconds. The interval will be at 
            least 60 seconds. To this interval a random delay may be added
            (see tt(--random-interval)).
    it() tt(--reload pidfile): reloads the configuration and skip-files and
            restarts the scan of a currently active s() process.
    it() tt(--rerun pidfile): restart the scan of a currently active s()
            process;
    it() tt(--resume pidfile): resume a suppressed s()
            process, implying tt(--rerun);
    it() tt(--suppress pidfile): suppress a currently active s()
            process. All scheduled scans following tt(--suppress) are skipped,
            tt(--rerun) is ignored, but tt(--resume) and tt(--terminate) 
            (see below) may be issued;
    it() tt(--terminate pidfile): terminate a currently active s()
            process;
    it() tt(--usage): Display help information and exit;
    it() tt(--help): Display help information and exit;
    it() tt(pidfile): file containing the process id of a s() process;
    it() tt(policy): path to the policyfile;
    )

manpagesection(DEPLOYMENT SUMMARY)
    The following summarizes the advised steps to perform when installing
    stealth. All these steps are elaborated upon in s()'s em(User Guide)
        (chapter em(Running `stealth')): 
    itemization(
    it() Install s() (e.g., use bf(dpkg)(1) to install the bf(.deb) file);
    it() Construct one or more policy files;
    it() Automate running s() using bf(cron)(1) (possibly calling
        bf(stealthcron));
    it() Set up automated log-file rotation, using, e.g., bf(stealthcleanup)
        and bf(logrotate)(1), defining one or more
        tt(/etc/logrotate.d/stealth...) configuration files.
    )

manpagefiles()

    tt(/usr/share/doc/stealth/);nl()
    the tt(policy) file;nl()
    files under the bf(BASE) directory as defined in the tt(policy) file;nl()
    the report file as defined by the policy's bf(USE REPORT) directive.

manpageseealso() 
   bf(cron)(1), bf(dd)(1), bf(diff)(1), bf(dpkg)(1), bf(find)(1),
    bf(logrotate)(1), bf(ls)(1), bf(mail)(1), bf(sha1sum)(1), bf(passwd)(5),
    bf(sendmail)(1), bf(sh)(1), bf(ssh)(1)

manpagesection(DIAGNOSTICS)
       By default, executed commands are echoed to stderr. Use bf(-q) to
suppress this echoing.

manpagebugs()
    None reported

manpagesection(COPYRIGHT)
    This is free software, distributed under the terms of the `GNU General
Public License'. Copyright remains with the author. S() is found at
tt(http://stealth.sourceforge.net/).

manpagesection(ORGANIZATION)
    Center for Information Technology, University of Groningen.

manpageauthor()
    Frank B. Brokken (bf(f.b.brokken@rug.nl)).
