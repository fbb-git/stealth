Initially the running mode is set to INTEGRITY_SCAN. Options may change the
initial mode.

If the --daemon option was not requested, there is just one integrity scan and
Stealth::performtasks terminates

Flow control is handled through IPC signals, in combination with information
written to the pid-file.

The first line of the PID file contains the pid of the daemon process.
A second line may be written by a stealth process requesting an action of the
daemon, followed by the pid of the process issuing the request. Requests are:

    Suspend     - suspend
    Resume      - resume
    Run         - run an itegrity scan once
    Reload      - after the current scan has completed (it may already have
                    completed) load a new policy file / skip file
                    specification and perform another integrity scan.

A request is written to the PID file, followed by sending the daemon a SIGUSR1
signal. When the daemon has completed the request it sends the requesting
process a SIGUSR1 signal; 

OBS 
OBS     SIGINT (ctrl C) and SIGTERM
OBS     ===========================
OBS 
OBS When the process running the integrity scan receives a SIGINT (ctrl C) or
OBS SIGTERM signal the file integrity scan terminates normally. If
OBS a daemon file integrity scan process receives these signals the run-file is
OBS removed by the terminating program. 
OBS 
OBS Stealth --terminate sends a SIGTERM signal to a stealth process running as a
OBS daemon. 
OBS 
OBS     SIGUSR1
OBS     =======
OBS 
OBS When the process running the integrity scan receives a SIGUSR1 signal the file
OBS integrity scan is suspended.
OBS 
OBS Stealth --suspend sends a SIGUSR1 signal to a stealth process running as a
OBS daemon. 
OBS 
OBS     (The previously supported --suppress option has been discontinued in favor
OBS      of --suspend)
OBS 
OBS 
OBS     SIGUSR2
OBS     =======
OBS 
OBS When the process running the integrity scan receives a SIGUSR2 signal a
OBS suppressed file integrity scan is resumed.
OBS 
OBS Stealth --resume sends a SIGUSR2 signal to a stealth process running as a
OBS daemon. 
OBS 
OBS     SIGHUP
OBS     ======
OBS 
OBS When the process running the integrity scan receives a SIGHUP signal a waiting
OBS (temporarily suspended) stealth file integrity scan process is run once.
OBS 
OBS Stealth --rerun sends a SIGHUP signal to a stealth process running as a
OBS daemon.
OBS 
OBS     SIGPIPE
OBS     =======
OBS 
OBS When the process running the integrity scan receives a SIGPIPE signal a
OBS possibly running file integrity scan process is first finished, after which
OBS the current policy file is replaced by another one, followed by a file
OBS integrity scan. 
OBS 
OBS Stealth --reload sends a SIGPIPE signal to a stealth process running as a
OBS daemon.
OBS 
OBS 
OBS ===============================================================================

Stealth uses a RunMode object to keep track of its current mode of operation
and an IPC object to handle the inter process communication.

The flow of control handling requests is defined in processRequests,
called from doChores. ProcessRequests defines a loop basically processing a
request and waiting for the next request ((waitForRequest)

The file integrity scan itself is handled by an IntegrityScanner object.

------------------------------------------------------------------------------

Stealth::monitor monitors and handles the integrity scans and incoming
signals. 




Stealth has several modes of operation, defined in stealthenums/stealthenums.h
and (partially) controlled by command-line options:

===========================================================================
option      mode            meaning/action
===========================================================================
default     INTEGRITY_SCAN, single run in the foreground

daemon      INTEGRITY_SCAN, 
            then WAIT       multiple runs: Stealth becomes a daemon process

rerun       RERUN           reruns at mode WAIT

suspend     SUSPEND,        suspends a running Stealth daemon process, ended
                            by options --resume or --terminate

resume                      resumes a SUSPENDed Stealth daemon process

reload      RELOAD,         a running Stealth daemon process reloads its
                            config files (through SIGCHLD)

terminate   TERMINATE,      terminate a running Stealth daemon process 
                            a daemon can also be ended through a SIGTERM
                            signal 

-----------------------------------------------------------------------------

debug                       OK

parse-policy-file           OK, but takes priority over all other options.

stdout                      only with 'default', otherwise warning and ignored

verbosity                   OK

max-size                    OK

config                      only 'default' and 'daemon'

log                         OK

log-mail                    OK

no-mail                     OK

random-interval             'daemon' only (implies 'daemon')

run-command                 only 'default'

skip-files                  only 'default' and 'daemon'

syslog*                     OK

repeat                      'daemon' only (implies 'daemon')


===========================================================================

Communications with the daemon use the run-file and signals SIGUSR1 (and
SIGTERM). The run-file by default contains the pid of the daemon process. The
signalling stealth process adds a request (Mode number) and its own pid to the
file. The daemon reads the request and answers the requestor by sending back a
SIGUSR1 (request handled OK) or a SIGUSR2 (improper request in the current
mode). An improper request is, e.g., a SUSPEND request when a SUSPEND request
has just been issued.

------------------------------------------------------------------------------
------------------------------------------------------------------------------

OLD:
====
All actions are controlled by Monitor::control, started by main(). This is the
only real action main performs.

Monitor:
    control(): performs one infinite loop, in which the following actions
        occur: 
        
            processMode() is called. It performs the actions associated with a
                          particular mode.
            following this the report is mailed by mailReport().

            Actions are s_mode-dependent. 
            The variable s_mode is global, and may be modified by daemon
            process signal handlers: 

            s_mode = 
            ONCE:           the foreground process ends.
            TERMINATED:     the daemon process ends.

            SUPPRESSED:     the daemon process is now in its suppressed state.
                            it sends a SUGUSR1 signal to the suppressing
                            process, and goes into suspend mode, from which it
                            awakes (at control()'s wait() call) when receiving
                            a resume (SIGUSR2) signal.

    processMode() performs its own infinite loop, during which s_mode may
        change. By default it calls Scanner::run() to perform a stealth-run.
