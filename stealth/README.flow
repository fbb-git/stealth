Initially the running mode is set to INTEGRITY_SCAN. Options may change the
initial mode.

If no --daemon option is requested, there is just one integrity scan and
Stealth::performtasks terminates

Flow control is handled through IPC signals.

    SIGINT (ctrl C) and SIGTERM
    ===========================

When the process running the integrity scan receives a SIGINT (ctrl C) or
SIGTERM signal the file integrity scan terminates normally. If
a daemon file integrity scan process receives these signals the run-file is
removed by the terminating program. 

Stealth --terminate sends a SIGTERM signal to a stealth process running as a
daemon. 

    SIGUSR1
    =======

When the process running the integrity scan receives a SIGUSR1 signal the file
integrity scan is suspended.

Stealth --suspend sends a SIGUSR1 signal to a stealth process running as a
daemon. 

    (The previously supported --suppress option has been discontinued in favor
     of --suspend)


    SIGUSR2
    =======

When the process running the integrity scan receives a SIGUSR2 signal a
suppressed file integrity scan is resumed.

Stealth --resume sends a SIGUSR2 signal to a stealth process running as a
daemon. 

    SIGHUP
    ======

When the process running the integrity scan receives a SIGHUP signal a waiting
(temporarily suspended) stealth file integrity scan process is run once.

Stealth --rerun sends a SIGHUP signal to a stealth process running as a
daemon.

    SIGPIPE
    =======

When the process running the integrity scan receives a SIGPIPE signal a
possibly running file integrity scan process is first finished, after which
the current policy file is replaced by another one, followed by a file
integrity scan. 

Stealth --reload sends a SIGPIPE signal to a stealth process running as a
daemon.


===============================================================================

Stealth uses a RunMode object to keep track of its current mode of operation
and an IPC object to handle the inter process communication.
The file integrity scan itself is handled by an IntegrityScanner object.


Stealth::monitor monitors and handles the integrity scans and incoming
signals. 




Stealth has several modes of operation, defined in monitor/monitor.h, and
(partially) controlled by command-line options:

option      mode            meaning/action

default     ONCE,           single run in the foreground
daemon  KEEP_ALIVE,     multiple runs: Stealth becomes a daemon process

terminate   TERMINATE,      terminate a running Stealth daemon process 
                                (through SIGTERM)
            TERMINATED,     automatically, following TERMINATE
suppress    SUPPRESS,       suppress a running Stealth daemon process, 
                                (through SIGUSR1) 
            SUPPRESSED,     automatically following SUPPRESS
resume                      resumes a SUPPRESSed Stealth daemon process
                                (through SIGUSR2)
reload      RELOAD,         a running Stealth daemon process reloads its
                            config files (through SIGCHLD)

All actions are controlled by Monitor::control, started by main(). This is the
only real action main performs.

Monitor:
    control(): performs one infinite loop, in which the following actions
        occur: 
        
            processMode() is called. It performs the actions associated with a
                          particular mode.
            following this the report is mailed by mailReport().

            Actions are s_mode-dependent. 
            The variable s_mode is global, and may be modified by daemon
            process signal handlers: 

            s_mode = 
            ONCE:           the foreground process ends.
            TERMINATED:     the daemon process ends.

            SUPPRESSED:     the daemon process is now in its suppressed state.
                            it sends a SUGUSR1 signal to the suppressing
                            process, and goes into suspend mode, from which it
                            awakes (at control()'s wait() call) when receiving
                            a resume (SIGUSR2) signal.

    processMode() performs its own infinite loop, during which s_mode may
        change. By default it calls Scanner::run() to perform a stealth-run.
